{"version":3,"sources":["../source/element.js"],"names":["elemName","css","styleCSS","inlineStyle","style","styleName","colors","randomClassName","options","replacedStyle","props","updatedCss","Object","assign","selectorRule","publish","elemProps","passedTrueProps","keys","filter","name","length","reduce","styleProps","hasOwnProperty","named","className","createElement","children"],"mappings":"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","file":"element.js","sourcesContent":["\nimport React from 'react'\nimport { genCss, replacedStyle, classes } from './utils'\n\nexport default function({elemName, css,styleCSS,inlineStyle,style,styleName, colors, randomClassName, options,replacedStyle}){\n\n  return props => {\n\n      if(\"css\" in props){\n\n        const updatedCss = Object.assign({},css)\n\n        for(const selectorRule in props.css){\n          updatedCss[selectorRule] = Object.assign({},css[selectorRule], \"function\" === typeof props.css[selectorRule] ? props.css[selectorRule]() : props.css[selectorRule])\n        }\n        classes.publish(randomClassName, genCss({randomClassName, css:updatedCss,styleCSS, colors,style,styleName}))\n      }\n\n      const elemProps = Object.assign({},props);\n\n    let passedTrueProps = Object.keys(props)\n                                .filter( name => props[name] === true && styleCSS[styleName] && name in styleCSS[styleName] )\n    //  console.log(\"passedTrueProps\",passedTrueProps)\n    if(0 < passedTrueProps.length){\n      passedTrueProps = passedTrueProps.reduce((styleProps, name) => {\n        // If elem is a HTML type = Removed it Unknown prop `...` on <...> tag. Remove this prop from the element.\n        if(\"function\" !== typeof elemName && \"disabled\" !== name){\n          delete elemProps[name]\n        }\n        return Object.assign(styleProps,{[name]:true})\n      },{})\n    } else {\n      passedTrueProps = null\n    }\n      if(passedTrueProps || props.hasOwnProperty(\"style\")){\n        //if(props.style instanceof Object)\n        //    passedTrueProps = Object.assign({},props.style,passedTrueProps);\n        elemProps.style = replacedStyle[styleName](props.style,passedTrueProps);\n      } else {\n        elemProps.style = inlineStyle || replacedStyle[styleName]();\n      }\n\n      if(Object.keys(elemProps.style).length === 0){\n         delete elemProps.style;\n      }\n\n      if(options.named){\n        elemProps.name = elemProps.name || styleName;\n      }\n\n        elemProps.className  = elemProps.className || \"\"\n        elemProps.className += randomClassName     || \"\"\n        if(\"\" === elemProps.className)\n            delete elemProps.className;\n\n      return React.createElement(elemName||styleName,elemProps,elemProps && elemProps.children)\n  }\n}\n"]}