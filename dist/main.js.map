{"version":3,"sources":["../source/main.js"],"names":["userSetOptions","named","topLevelWrapStyles","_styles","options","styleCSS","Error","JSON","stringify","Array","isArray","Object","assign","base","fns","optionsIsFns","prop","hasOwnProperty","wrappedStyles","wrapStyles","colors","caching","replacedStyle","styleItemGen","keys","concat","filter","item","pos","a","indexOf","styleName","forEach","withOptions","setOptions","buildCssString","props","classesValues","get","css","map","className","join","children","replace","Styles","StylesElem","createClass","displayName","getInitialState","subscribe","setTimeout","setState","cssString","render","state","createElement","toString","testing","resetCSS","clear"],"mappings":"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","file":"main.js","sourcesContent":["\nimport React from 'react'\nimport { classes, hasKids, specialCharacters, specialInnerCharacters, separateCssStyle, genStyles, genCss, makeid } from './utils'\n\nimport element from './element'\nimport styleItem from './styleItem'\n\n\n\nconst userSetOptions = { named:true/* prefix:getVendorPrefix()*/ }\n\n//+++++++++++++++++++++++++++++ { base:{}, foo: ()=> }\n//++++++++++++++++++++++++++++++++++++++++++++++++++++\nfunction topLevelWrapStyles(_styles,options={},styleCSS={}){\n\nif(\"object\" !== typeof _styles){\n  throw new Error(\"Bad style values: \"+JSON.stringify(_styles))\n}\n\n//+++++++++++++++++++++++++++++++++++++++ [ base, fn ]\n//++++++++++++++++++++++++++++++++++++++++++++++++++++\nif(Array.isArray(_styles)){\n\n    _styles = Object.assign({},{base:_styles[0]},_styles[1])\n\n} else if(!(\"base\" in _styles)) {\n\n  const base = {}, fns = {};\n\n//++++++++++++++ { table: {}, header:{} }, fn:{ ()=> }\n//++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n  let optionsIsFns = true;\n\n  for(const prop in options){\n      if(options.hasOwnProperty(prop) && \"function\" !== typeof options[prop]){\n        optionsIsFns = false;\n      }\n  }\n\n  if(optionsIsFns){\n    Object.assign(fns,options)\n  }\n\n  for(const prop in _styles){\n//+++++++++++++++++++++++++++ { table: {}, header:{} }\n//++++++++++++++++++++++++++++++++++++++++++++++++++++\n      if(\"object\" === typeof _styles[prop]){\n        base[prop] = _styles[prop]\n//++++++++++++++++++++++++++++++++++++++ { foo: ()=> }\n//++++++++++++++++++++++++++++++++++++++++++++++++++++\n      } else if(\"function\" === typeof _styles[prop]){\n        fns[prop] = _styles[prop]\n      } else {\n        throw new Error(\"Bad style value: \"+JSON.stringify(_styles[prop]))\n      }\n  }\n  _styles = Object.assign({},{base},fns);\n}\n\n  const wrappedStyles = wrapStyles(_styles,options,styleCSS);\n        wrappedStyles.colors = wrappedStyles.colors\n                            || options        && options.colors\n                            || userSetOptions && userSetOptions.colors;\n  return wrappedStyles;\n}\n\n\nfunction wrapStyles(_styles,options,styleCSS){\n\n  options = Object.assign({},userSetOptions,options);\n//  const radium = !!options.radium;\n  const caching = !!options.caching;\n  const colors = options.colors;\n  styleCSS = _styles.base || styleCSS\n  const replacedStyle = {}\n  if(_styles.base)\n    replacedStyle.base = styleCSS;\n\n  const styleItemGen = styleItem({_styles,replacedStyle,styleCSS, colors, options,caching, wrapStyles})\n\n  Object.keys(_styles)\n        .concat(Object.keys(styleCSS))\n        .filter((item, pos, a)=> a.indexOf(item) === pos )\n        .filter(styleName => \"base\" !== styleName)\n        .forEach(styleItemGen)\n\n  return replacedStyle\n}\n\n\nfunction withOptions(options){\n  if(!options) throw new Error(\"Bad options values for react-outline:\"+JSON.stringify(options))\n  return (_styles)=>topLevelWrapStyles(_styles,options)\n}\n\nfunction setOptions(options){\n  if(!options) throw new Error(\"Bad options values for react-outline:\"+JSON.stringify(options))\n  if(options.colors){\n    topLevelWrapStyles.colors = options.colors\n  }\n  Object.assign(userSetOptions,options)\n}\nfunction buildCssString(props={}){\nconst  classesValues = classes.get()\n let css = Object.keys(classesValues).map(className => classesValues[className] ).join(\" \");\n  css += props.children || \"\";\n  css = css.replace(/\\n/g, ' ').replace(/\\s+/g, ' ');\n  return css\n}\nfunction Styles(props){\n\n  const StylesElem = React.createClass({\n  displayName: \"Styles\",\n  getInitialState: function getInitialState() {\n    // setTimeout to fix: Warning: setState(...): Cannot update during an existing state transition\n    classes.subscribe(()=> setTimeout(()=>this.setState({cssString:buildCssString(props)}), 0) )\n    return { cssString : buildCssString(props)};\n  },\n  render: function render() {\n    return <style>{this.state.cssString}</style>;\n  }\n})\n  return React.createElement(StylesElem)\n}\n\nStyles.toString = ()=>buildCssString()\n\nconst testing = {\n  resetCSS: classes.clear\n}\n\nexport default topLevelWrapStyles\nexport { withOptions, setOptions, Styles, testing }\n"]}